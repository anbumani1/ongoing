// Load environment variables
require('dotenv').config();

const { GoogleGenerativeAI } = require('@google/generative-ai');

/**
 * Mock Google AI Service for testing and fallback scenarios
 */
class MockGoogleAIService {
    constructor() {
        console.log('🎭 Using Mock Google AI Service');
    }

    async generateContent(prompt) {
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 800));
        
        return `Mock response for: "${prompt.substring(0, 50)}..."\n\nThis is a simulated response from the mock Google AI service. In a real implementation, this would be generated by Google's Gemini model based on your prompt.`;
    }

    async chatWithAssistant(message, conversationHistory = [], userContext = {}) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const userName = userContext.firstName || 'there';
        const userDept = userContext.department || 'your department';
        
        // Simple keyword-based responses for demo
        const lowerMessage = message.toLowerCase();
        
        if (lowerMessage.includes('hello') || lowerMessage.includes('hi')) {
            return `Hello ${userName}! 👋 I'm your AI onboarding assistant powered by Google Gemini. I'm here to help you with any questions about your role in ${userDept}, learning resources, tasks, or company policies. What can I help you with today?`;
        }
        
        if (lowerMessage.includes('task') || lowerMessage.includes('assignment')) {
            return `I'd be happy to help with your tasks, ${userName}! 📋 

**For your current assignments in ${userDept}, I recommend:**

🔹 **Break it down**: Divide complex tasks into smaller, manageable steps
🔹 **Set milestones**: Create checkpoints to track your progress
🔹 **Ask questions**: Don't hesitate to reach out when you're stuck
🔹 **Document progress**: Keep notes on what you learn
🔹 **Regular check-ins**: Schedule updates with your supervisor

**Specific to ${userDept}:**
• Use collaborative tools for code reviews
• Follow department coding standards
• Participate in team stand-ups
• Test your work thoroughly before submission

Is there a specific task you'd like detailed guidance on?`;
        }
        
        if (lowerMessage.includes('learn') || lowerMessage.includes('training') || lowerMessage.includes('course')) {
            return `Excellent question about learning, ${userName}! 🎓 

**For someone in ${userDept}, I recommend:**

📚 **Technical Skills:**
• Advanced programming fundamentals
• Software architecture patterns
• Database design and optimization
• API development and integration
• Testing methodologies and frameworks

🛠️ **Tools & Technologies:**
• Version control (Git) best practices
• CI/CD pipeline management
• Cloud platforms and services
• Development environment setup
• Debugging and profiling tools

💼 **Professional Development:**
• Communication skills for technical teams
• Project management methodologies
• Code review and collaboration
• Technical documentation writing
• Leadership and mentoring skills

Would you like specific course recommendations or learning paths?`;
        }
        
        // Default comprehensive response
        return `Thanks for your question, ${userName}! I'm your AI onboarding assistant powered by Google Gemini, and I'm here to help you succeed in ${userDept}. 

**I can assist you with:**

🎯 **Task & Project Guidance**
• Breaking down complex assignments
• Best practices and methodologies
• Progress tracking and milestone planning

📚 **Learning & Development**
• Course and training recommendations
• Skill development roadmaps
• Professional growth planning

📋 **Company Information**
• Policy explanations and guidelines
• Process documentation and procedures
• Resource locations and contacts

🤝 **General Support**
• Onboarding questions and concerns
• Team integration and collaboration
• Work-life balance and wellness

Feel free to ask me anything specific about your onboarding journey!`;
    }

    async generateOnboardingContent(internData) {
        await new Promise(resolve => setTimeout(resolve, 1200));
        
        return `Welcome to the team, ${internData.firstName} ${internData.lastName}!

We're thrilled to have you join our ${internData.department} department starting ${internData.startDate}. 

Here's what you can expect in your first week:
• Complete orientation and safety training
• Meet your team members and direct supervisor
• Set up your workspace and access to necessary systems
• Review your initial project assignments
• Attend department overview sessions

Your journey with us starts now, and we're here to support you every step of the way. Don't hesitate to reach out to your mentor or HR team if you have any questions.

Looking forward to seeing the great contributions you'll make to our team!

Best regards,
The ${internData.department} Team

*Generated by Google Gemini AI Assistant*`;
    }

    async generateLearningRecommendations(internProfile) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        return `Personalized Learning Recommendations for ${internProfile.firstName} ${internProfile.lastName}

Based on your profile in ${internProfile.department}, here are tailored recommendations:

📚 **Recommended Courses:**
• Advanced ${internProfile.department} Fundamentals
• Project Management for Technical Professionals
• Communication Skills for Engineers
• Industry-Specific Certifications

📖 **Suggested Reading:**
• "Clean Code" by Robert C. Martin
• "The Pragmatic Programmer" by Hunt & Thomas
• Industry publications and technical blogs

🛠️ **Project Ideas:**
• Contribute to open-source projects in your field
• Build a personal portfolio showcasing your skills
• Participate in hackathons or coding challenges

🎯 **Skills to Develop:**
• Technical writing and documentation
• Cross-functional collaboration
• Problem-solving methodologies
• Leadership and mentoring abilities

🤝 **Networking Opportunities:**
• Join professional associations in your field
• Attend industry conferences and meetups
• Connect with alumni from your university
• Participate in company mentorship programs

These recommendations are tailored to help you grow in your current role while preparing for future career opportunities.

*Powered by Google Gemini AI*`;
    }
}

/**
 * Google AI Service using Gemini API
 */
class GoogleAIService {
    constructor() {
        console.log('🤖 Initializing Google AI Service...');
        
        if (!process.env.GOOGLE_AI_API_KEY) {
            console.warn('⚠️  GOOGLE_AI_API_KEY not found, using mock service');
            this.useMock = true;
            this.mockService = new MockGoogleAIService();
            return;
        }

        console.log('🔑 Google AI API key found, initializing real service...');
        this.useMock = false;

        try {
            this.genAI = new GoogleGenerativeAI(process.env.GOOGLE_AI_API_KEY);
            // Try different model names that are available
            this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
            console.log('✅ Google AI client initialized successfully');
        } catch (error) {
            console.error('❌ Failed to initialize Google AI client:', error);
            console.warn('⚠️ Falling back to mock service');
            this.useMock = true;
            this.mockService = new MockGoogleAIService();
        }
    }

    async generateContent(prompt, options = {}) {
        if (this.useMock) {
            return await this.mockService.generateContent(prompt);
        }

        try {
            console.log('🤖 Generating content with Google Gemini...');
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();
            console.log('✅ Content generated successfully');
            return text;
        } catch (error) {
            console.error('❌ Error generating content:', error);
            // Fallback to mock service
            return await this.mockService.generateContent(prompt);
        }
    }

    /**
     * Chatbot conversation method for real-time chat
     */
    async chatWithAssistant(message, conversationHistory = [], userContext = {}) {
        if (this.useMock) {
            return await this.mockService.chatWithAssistant(message, conversationHistory, userContext);
        }

        try {
            console.log('🤖 Starting chat with Google Gemini...');
            
            // Build conversation context
            const systemPrompt = `You are an AI assistant for an employee onboarding system. You help interns and new employees with:
- Learning and development questions
- Task assistance and guidance
- Company policy clarifications
- Career development advice
- Technical support for onboarding processes

User context:
- Name: ${userContext.firstName || 'User'} ${userContext.lastName || ''}
- Department: ${userContext.department || 'Not specified'}
- Role: ${userContext.role || 'Employee'}

Be helpful, professional, and encouraging. Provide specific, actionable advice when possible. Keep responses concise but informative.`;

            // Prepare the full prompt with context and conversation history
            let fullPrompt = systemPrompt + '\n\n';
            
            // Add recent conversation history (last 5 exchanges to stay within limits)
            const recentHistory = conversationHistory.slice(-10);
            if (recentHistory.length > 0) {
                fullPrompt += 'Recent conversation:\n';
                recentHistory.forEach(msg => {
                    const role = msg.role === 'user' ? 'User' : 'Assistant';
                    fullPrompt += `${role}: ${msg.content}\n`;
                });
                fullPrompt += '\n';
            }
            
            // Add current message
            fullPrompt += `User: ${message}\n\nAssistant:`;

            const result = await this.model.generateContent(fullPrompt);
            const response = await result.response;
            const text = response.text();
            
            console.log('✅ Chat response generated successfully');
            return text;
        } catch (error) {
            console.error('❌ Error in chat conversation:', error);
            // Fallback to mock service
            if (!this.mockService) {
                this.mockService = new MockGoogleAIService();
            }
            return await this.mockService.chatWithAssistant(message, conversationHistory, userContext);
        }
    }

    async generateOnboardingContent(internData) {
        if (this.useMock) {
            return await this.mockService.generateOnboardingContent(internData);
        }

        const prompt = `Generate a personalized welcome message for a new intern with the following details:
        Name: ${internData.firstName} ${internData.lastName}
        Department: ${internData.department}
        Start Date: ${internData.startDate}
        
        Include what they can expect in their first week and make it encouraging and professional.`;

        return await this.generateContent(prompt);
    }

    async generateLearningRecommendations(internProfile) {
        if (this.useMock) {
            return await this.mockService.generateLearningRecommendations(internProfile);
        }

        const prompt = `Generate personalized learning recommendations for an intern with the following profile:
        Name: ${internProfile.firstName} ${internProfile.lastName}
        Department: ${internProfile.department}
        Role: ${internProfile.role}
        Current Skills: ${internProfile.skills || 'Not specified'}
        Career Goals: ${internProfile.goals || 'Professional development'}
        
        Please provide specific, actionable recommendations including courses, books, projects, and networking opportunities.`;

        return await this.generateContent(prompt);
    }
}

module.exports = GoogleAIService;
